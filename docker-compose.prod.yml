version: '3.8'

# Production override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Redis with production settings
  redis:
    restart: always
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --save 60 1000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend with production settings
  backend:
    restart: always
    environment:
      - LOG_LEVEL=INFO
      - WORKERS=4  # Multiple workers for production
      - RELOAD=false
    command: ["gunicorn", "main:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "--access-logfile", "-", "--error-logfile", "-"]
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend with production settings
  frontend:
    restart: always
    environment:
      - BACKEND_URL=http://nginx:80  # Use nginx in production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx reverse proxy (enabled in production)
  nginx:
    restart: always
    profiles: []  # Remove profile restriction for production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus monitoring (enabled in production)
  prometheus:
    restart: always
    profiles: []  # Remove profile restriction for production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: genai-devops-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123  # Change in production
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - genai-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: genai-devops-fluentd
    restart: always
    volumes:
      - ./config/fluentd:/fluentd/etc:ro
      - ./logs:/var/log/app
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - genai-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# Production volumes with specific drivers
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/genai-devops/data/redis
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/genai-devops/data/grafana
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/genai-devops/data/prometheus